{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 protocol RandomNumberGenerator \{\
	\
	func random() -> Double\
	\
\}\
\
class LinearCongruentialGenerator: RandomNumberGenerator \{\
	\
	var lastRandom = 42.0\
	let m = 13968.0\
	let a = 3877.0\
	let c = 29573.0\
	\
	func random() -> Double \{\
		lastRandom = ((lastRandom * a + c).truncatingRemainder(dividingBy:m))\
		return lastRandom / m\
	\}\
	\
\}\
\
// Protocol used as a type\
\
class Dice \{\
	\
	let sides: Int\
	let generator: RandomNumberGenerator\
	init(sides: Int, generator: RandomNumberGenerator) \{\
		self.sides = sides\
		self.generator = generator\
	\}\
	\
	func roll() -> Int \{\
		return Int(generator.random() * Double(sides)) + 1\
	\}\
	\
\}\
\
var d6 = Dice(sides: 6, generator: LinearCongruentialGenerator())\
\
for _ in 1...5 \{\
\
	print("Random dice roll is \\(d6.roll())")\
	\
\}\
\
protocol DiceGame \{\
	\
	var dice: Dice \{ get \}\
	\
	func play()\
	\
\}\
// protocol that can be adopted by any game that involves dice.\
\
\
protocol DiceGameDelegate: AnyObject \{\
	\
	func gameDidStart(_ game: DiceGame)\
	func game(_ game: DiceGame, didStartNewTurnWithDiceRoll diceRoll: Int)\
	func gameDidEnd(_ game: DiceGame)\
	\
\}\
// protocol that can be adopted to track the progress of a DiceGame.\
\
\
\
class SnakesAndLadders: DiceGame \{\
	\
	let finalSquare = 25\
	let dice = Dice(sides: 6, generator: LinearCongruentialGenerator())\
	var square = 0\
	var board: [Int]\
	\
	init() \{\
		board = Array(repeating: 0, count: finalSquare + 1)\
		board[03] = +08;\
		board[06] = +11;\
		board[09] = +09;\
		board[10] = +02;\
		board[14] = -10;\
		board[19] = -11;\
		board[22] = -02;\
		board[24] = -08;\
	\}\
	\
	weak var delegate: DiceGameDelegate?\
	\
	func play() \{\
		square = 0\
		delegate?.gameDidStart(self)\
		gameLoop: while square != finalSquare \{\
			let diceRoll = dice.roll()\
			delegate?.game(self, didStartNewTurnWithDiceRoll: diceRoll)\
			switch square + diceRoll \{\
				case finalSquare:\
					break gameLoop\
				case let newSquare where newSquare > finalSquare:\
					continue gameLoop\
				default:\
					square += diceRoll\
					square += board[square]\
			\}\
		\}\
		\
		delegate?.gameDidEnd(self)\
	\}\
	\
\}\
\
\
class DiceGameTracker: DiceGameDelegate \{\
	\
	var numberOfTurns = 0\
	\
	func gameDidStart(_ game: DiceGame) \{\
		numberOfTurns = 0\
		\
		if game is SnakesAndLadders \{\
			print("Started a new game of Snakes and Ladders")\
		\}\
		print("The game is using a \\(game.dice.sides)-sided dice")\
	\}\
	\
	func game(_ game: DiceGame, didStartNewTurnWithDiceRoll diceRoll: Int) \{\
		numberOfTurns += 1\
		print("Rolled a \\(diceRoll)")\
	\}\
	\
	func gameDidEnd(_ game: DiceGame) \{\
		print("The game last for \\(numberOfTurns) turns")\
	\}	\
	\
\}\
\
let tracker = DiceGameTracker()\
let game = SnakesAndLadders()\
game.delegate = tracker\
game.play()\
\
\
\
protocol TextRepresentable \{\
	var textualDescription: String \{\
		get\
	\}\
\}\
\
extension Dice: TextRepresentable \{\
	var textualDescription: String \{\
		return "A \\(sides)-sided dice"\
	\}\
\}\
\
let d12 = Dice(sides: 12, generator: LinearCongruentialGenerator())\
print(d12.textualDescription)\
\
\
extension SnakesAndLadders: TextRepresentable \{\
	var textualDescription: String \{\
		return "A game of Snakes and Ladders with \\(finalSquare) squares"\
	\}\
\}\
\
print(game.textualDescription)\
\
\
// extension Array: TextRepresentable where Element: TextRepresentable \{\
// 	var textualDescription: String \{\
// 		let itemsAsText = self.map \{ $0.textualDescription \}\
// 		return "[" + itemsAsText.joined(separator: ", ") + "]"\
// 	\}\
// \}\
\
// let myDice = [d6, d12]\
// print(myDice.textualDescription)\
\
\
struct Hamster \{\
	var name: String\
	\
	var textualDescription: String \{\
		return "A hamster named \\(name)"\
	\}\
\}\
\
extension Hamster: TextRepresentable \{\}\
\
// Instances of Hamster can now be uses whenever TextRepresentable is the required type:\
\
let simonTheHamster = Hamster(name: "Simon")\
let somethingTextRepresentable: TextRepresentable = simonTheHamster\
print(somethingTextRepresentable.textualDescription)\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
}